# Create your views here.


import os.path

from community.models import Area, CommunityInfo, CommunityPrice
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.contrib.auth.decorators import login_required
from django.utils.translation import ugettext as _
from django.core.exceptions import ObjectDoesNotExist

from django.db.models import get_app
from django.core.exceptions import ImproperlyConfigured
from django.conf import settings



def community(request):

    if request.method == "GET":
               
        Publisher.objects.filter()




        if 'img_upload' in request.POST:
            path = avatar_file_path(user=request.user)

            if avatar == None:
                avatar = Avatar(user=request.user, avatar=path)
            
            if avatar.avatar.storage.exists(avatar.avatar.name):
                avatar.avatar.storage.delete(avatar.avatar.name)
            new_file = avatar.avatar.storage.save(path, request.FILES['avatar'])
            avatar.save()
        if 'img_cut' in request.POST:
            pos_str = request.POST["imgpos"]
            pos_array = pos_str.split('_')
 
            if avatar == None:      # can't cut the default avatar
                return render_to_response(
                    'avatar/change.html',
                    extra_context,
                    context_instance = RequestContext(
                        request,
                        { 'avatar': avatar, 
                          'next': next_override or _get_next(request), }
                    )
                )


            [w,h] = avatar.avatar_orig_size()   
            ratio = max(w,h) / float(pos_array[4])  # get the zoom ratio of the original avatar

            x1 = int( float(pos_array[0]) * ratio )
            y1 = int( float(pos_array[1]) * ratio )
            x2 = int( float(pos_array[2]) * ratio )
            y2 = int( float(pos_array[3]) * ratio )
            pos = [x1, y1, x2, y2]
            size = int(pos_array[5])


            if avatar != None:
                avatar.create_thumbnail_pos(size, pos)

        request.user.message_set.create(
            message=_("Successfully uploaded a new avatar."))
        notification.send([request.user], "avatar_updated", {"user": request.user, "avatar": avatar})
        if friends:
            notification.send((x['friend'] for x in Friendship.objects.friends_for_user(request.user)), "avatar_friend_updated", {"user": request.user, "avatar": avatar})
        return HttpResponseRedirect(next_override or _get_next(request))
       
    return render_to_response(
        'avatar/change.html',
        extra_context,
        context_instance = RequestContext(
            request,
            { 'avatar': avatar, 
              'next': next_override or _get_next(request), }
        )
    )
change = login_required(change)


